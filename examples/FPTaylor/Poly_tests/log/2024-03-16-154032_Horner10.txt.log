Base path: /home/ak2485/Documents/research/FPTaylor
Config file: /home/ak2485/Documents/research/FPTaylor/default.cfg
Config file: ../config.cfg
default-rnd = rnd64
nlopt-cc = gcc -std=c99 -O3
opt-exact = true
develop = false
log-append-date = start
uncertainty = false
rel-error = true
opt-approx = false
proof-record = false
find-bounds = false
proof-dir = proofs
opt-f-abs-tol = 0.01
fail-on-exception = true
print-opt-lower-bounds = true
bb-compile = {base}/b_and_b/compile.sh {base} {input} {out}
z3-python-lib = 
opt-x-abs-tol = 0.01
export-error-bounds = 
opt-f-rel-tol = 0.01
export-options = 
opt-x-rel-tol = 0.0
rel-error-threshold = 0.0001
bb-alg = opt0
log-base-dir = log
intermediate-opt = false
z3-interval-bounds = true
opt-max-iters = 1000000
abs-error = false
z3-bin = 
maxima-simplification = false
print-hex-floats = true
debug = true
print-precision = 7
export-error-bounds-data = 
fp-power2-model = true
opt = auto
default-var-type = float64
verbosity = 0
ulp-error = false
opt-timeout = 10000
nlopt-lib = -lnlopt -lm
tmp-base-dir = tmp
unique-indices = false
z3-seed = 0
tmp-date = false
z3-python-cmd = python
const-approx-real-vars = false
print-second-order-errors = false
Resetting input_parser_env
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: (1/10)
result: 1/10
eval_const_expr: 1000
result: 1000
eval_const_expr: 0
result: 0
eval_const_expr: 1000
result: 1000
eval_const_expr: (1/10)
result: 1/10
Resetting input_parser_env
|tasks| = 1
Processing: Horner10

*************************************
Taylor form for: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5)) * x) + a4)) * x) + a3)) * x) + a2)) * x) + a1)) * x) + a0))

Conservative bound: [0.111111, 1001001001001004855087223938220032.000000]

Simplified rounding: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5)) * x) + a4)) * x) + a3)) * x) + a2)) * x) + a1)) * x) + a0))
Building Taylor forms...
var_form
var_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
mul_form
var_form
add_form
rounded_form
Taylor forms cache stats: num_bindings = 42, num_buckets = 1024, max_bucket_length = 2
Expr cache stats: num_bindings = 138, num_buckets = 65536, max_bucket_length = 1
Simplifying Taylor forms...
success
v0 = ((((((((((((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) * x) + a5) * x) + a4) * x) + a3) * x) + a2) * x) + a1) * x) + a0)
-1: exp = -53: (3641620427519235/9076030935533343889148330677184451660957398691768765008885326289770145612551296225251271450782204288267814476258502032778653474399077793626653018683486295323382390383590453332169716856898789897889643528945016096228440849041002686084943230837088977557446564364344140092918489677824)
1: exp = -53: (x * (x * (x * (x * (x * (x * (x * (x * (x * (2 * floor_power2((((a10 * x) + a9) + 0))))))))))))
2: exp = -53: (x * (x * (x * (x * (x * (x * (x * (x * (2 * floor_power2((((((a10 * x) + a9) * x) + a8) + interval(-1.16415321826934827688e-07, 1.16415321826934827688e-07))))))))))))
3: exp = -53: (x * (x * (x * (x * (x * (x * (x * (2 * floor_power2((((((((a10 * x) + a9) * x) + a8) * x) + a7) + interval(-2.35624611377716091558e-04, 2.35624611377716091558e-04)))))))))))
4: exp = -53: (x * (x * (x * (x * (x * (x * (2 * floor_power2((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) + interval(-3.57694923877716119964e-01, 3.57694923877716119964e-01))))))))))
5: exp = -53: (x * (x * (x * (x * (x * (2 * floor_power2((((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) * x) + a5) + interval(-4.82694923877716121297e+02, 4.82694923877716121297e+02)))))))))
6: exp = -53: (x * (x * (x * (x * (2 * floor_power2((((((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) * x) + a5) * x) + a4) + interval(-6.10694923877716180868e+05, 6.10694923877716180868e+05))))))))
7: exp = -53: (x * (x * (x * (2 * floor_power2((((((((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) * x) + a5) * x) + a4) * x) + a3) + interval(-7.41766923877716183662e+08, 7.41766923877716183662e+08)))))))
8: exp = -53: (x * (x * (2 * floor_power2((((((((((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) * x) + a5) * x) + a4) * x) + a3) * x) + a2) + interval(-8.75984651877716186523e+11, 8.75984651877716186523e+11))))))
9: exp = -53: (x * (2 * floor_power2((((((((((((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) * x) + a5) * x) + a4) * x) + a3) * x) + a2) * x) + a1) + interval(-1.01342360534971612500e+15, 1.01342360534971612500e+15)))))
10: exp = -53: (2 * floor_power2((((((((((((((((((((((a10 * x) + a9) * x) + a8) * x) + a7) * x) + a6) * x) + a5) * x) + a4) * x) + a3) * x) + a2) * x) + a1) * x) + a0) + interval(-1.15416109370504422400e+18, 1.15416109370504422400e+18))))

Corresponding original subexpressions:
1: rnd64_up(((a10 * x) + a9))
2: rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8))
3: rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7))
4: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6))
5: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5))
6: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5)) * x) + a4))
7: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5)) * x) + a4)) * x) + a3))
8: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5)) * x) + a4)) * x) + a3)) * x) + a2))
9: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5)) * x) + a4)) * x) + a3)) * x) + a2)) * x) + a1))
10: rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((rnd64_up(((a10 * x) + a9)) * x) + a8)) * x) + a7)) * x) + a6)) * x) + a5)) * x) + a4)) * x) + a3)) * x) + a2)) * x) + a1)) * x) + a0))

Selected optimization method: bb
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 0): 0
min = 1.111111e-01 (lower_min = 1.111111e-01)
max = 1.001001e+33 (lower_max = 1.001001e+33)
subopt = 1.585267e+18 (0.0%)
bounds: [1.111111e-01, 1.001001e+33]

Computing relative errors
Selected optimization method: bb-eval
bb-eval_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
rmin(result = 4.012349e-265, lower = 4.012349e-265), rmax(result = 4.012349e-265, lower = 4.012349e-265)
-1: exp = -53: 4.012349e-265 (low = 4.012349e-265, subopt = 0.0%)

Solving the exact optimization problem
Selected optimization method: bb
bb_opt: x_abs_tol = 1.000000e-02, f_rel_tol = 1.000000e-02, f_abs_tol = 1.000000e-02, iters = 1000000
iterations(min = 0, max = 1000000): 1000000
min = 0.000000e+00 (lower_min = 0.000000e+00)
max = 1.028220e+32 (lower_max = 1.557198e+01)
subopt = 1.028220e+32 (100.0%)
exact bound-rel (exp = -53): 1.028220e+32 (low = 1.557198e+01, subopt = 100.0%)
total2: 4.009142e-280 (low = 4.450148e-314, subopt = 100.0%)
exact total-rel: 1.141554e+16 (low = 1.728837e-15, subopt = 100.0%)

Elapsed time: 26.74313
*************************************

-------------------------------------------------------------------------------
Problem: Horner10

Optimization lower bounds for error models:
The relative error (exact) model: 1.728836e-15 (0x1.f24da407d144bp-50) (suboptimality = 100.0%)

Bounds (without rounding): [1.111111e-1, 1.001002e+33]

Relative error (exact): 1.141554e+16 (0x1.4472fad483baap+53)

Elapsed time: 26.74

