{(A : ((num, num), (num, num))) (u : (num, num))}
`{(a : dnum) (b : dnum) (v : (dnum, dnum))}

/* let x = MatVecMul A v */
let (A0, A1) = A;
dlet (v0, v1) = v;

let (A00, A01) = A0;
let v0A00 = dmul v0 A00;
let v1A01 = dmul v1 A01;
let x0 = add v0A00 v1A01;

let (A10, A11) = A1;
let v0A10 = dmul v0 A10;
let v1A11 = dmul v1 A11;
let x1 = add v0A10 v1A11;

/* let y = ScaleVec b u */
let (u0, u1) = u;
let y0 = dmul b u0;
let y1 = dmul b u1;

/* GVecAdd a x y */
let x0' = dmul a x0;
let x1' = dmul a x1;

let x = add x0' y0;
let y = add x1' y1;
add x y 
