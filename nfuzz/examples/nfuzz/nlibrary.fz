function mulfp (xy: (num, num)) : M[eps64_up]num {
  let (x,y) = xy;
  s = mul (x,y);
  rnd s
}

function addfp (xy: <num, num>) : M[eps64_up]num {
  x = pi1 xy;
  y = pi2 xy;
  s = add (|x, y|);
  rnd s
}

function divfp (xy: (num, num)) : M[eps64_up]num {
  let (x,y) = xy;
  s = div (x,y);
  rnd s
}

function sqrtfp (x: ![0.5]num) : M[eps64_up]num {
  s = sqrt x;
  rnd s
}

function MA (x : num) (y : num) (z : num) : M[4.441e-16]num {
  s = mulfp (x,y);
  let a = s;
  addfp (|a,z|)
}

function FMA (x : num) (y : num) (z : num) : M[eps64_up]num {
  a = mul (x,y);
  b = add (|a,z|);
  rnd b
}
